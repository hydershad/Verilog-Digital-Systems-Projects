001100 00001 00001 00000 00000 000000  //andi $1, $1, 0
001000 00001 00001 00000 00000 000001  //addi $1, $1, 1 //0
001100 00010 00010 00000 00000 000000  //andi $2, $2, 0
001000 00010 00010 00001 11110 100000  //addi $2, $2, 4000 //delay loop counter register
001100 00011 00011 00000 00000 000000  //andi $3, $3, 0
001000 00001 00001 00000 00000 000111  //addi $3, $3, 7 //shift counter
001100 00100 00100 00000 00000 000000  //andi $4, $4, 0
001000 00100 00100 00000 00000 000001  //addi $4, $4, 1 //R4 = subrtract 1 reg value
001100 00101 00101 00000 00000 000000  //andi $5, $5, 0 //R5 = zero for branch comparison
//loop

000000 00010 00100 00010 00000 100011	//subu $2, $2, $4 //sbtract 1 from R2
000101 00010 00101 11111 11111 111110	//bne $2, $5, -2 //keep looping for delay
001000 00010 00010 00001 11110 100000  //addi $2, $2, 4000 //reset delay loop counter
000000 00000 00001 00001 00001 000000  //sll $1, $1, 1 //1 
000000 00011 00100 00011 00000 100011	//subu $3, $3, $4 //subtract 1 from R3 shift counter
000101 00011 00101 11111 11111 111010	//bne $3, $5, -6 //see if all shifts are done, if not jump back to shift left
001100 00001 00001 00000 00000 000000  //andi $1, $1, 0
001000 00001 00001 00000 00000 000001  //addi $1, $1, 1 //0
000010 00000 00000 00000 00000 001001  //j 9, the address where the delay starts.


////alt code without loops, no hardcoded delays must use super slow clk speed

001100 00001 00001 00000 00000 000000  //andi $1, $1, 0
001000 00001 00001 00000 00000 000001  //addi $1, $1, 1 //0
000000 00000 00001 00001 00001 000000  //sll $1, $1, 1 //1
000000 00000 00001 00001 00001 000000  //sll $1, $1, 1 //1
000000 00000 00001 00001 00001 000000  //sll $1, $1, 1 //1 
000000 00000 00001 00001 00001 000000  //sll $1, $1, 1 //1
000000 00000 00001 00001 00001 000000  //sll $1, $1, 1 //1 
000000 00000 00001 00001 00001 000000  //sll $1, $1, 1 //1 
000000 00000 00001 00001 00001 000000  //sll $1, $1, 1 //1 
000000 00000 00001 00001 00111 000010  //srl $1, $1, 7 //7 right 
000010 00000 00000 00000 00000 000010  //j, address 2



//////////lab7B

//start:
001000 00001 00110 00000 00000 000000 //addi r6, r1, #0
001100 01000 01000 00000 00000 000000 //andi r8, r8, #0
001111 00000 00100 01110 00000 000000 //lui r4, 28672
001111 00000 00101 01111 11111 111111 //lui r5, 32767
001101 01000 01000 00000 00000 001011 //ori r8, r8, #11

//loop: address 5
000100 00001 00110 11111 11111 111111 //beq r6, r1, loop
001000 00001 00110 00000 00000 000000 //addi r6, r1, #0
000000 00000 00001 00111 00001 000000 //sll r7, r1, #1
000000 00111 01000 00111 00000 100000 //add r7, r8, r7
000000 00111 00000 00000 00000 001000 //jr r7
000010 00000 00000 00000 00000 000101 //j loop

//call table: address 11
000011 00000 00000 00000 00000 011001 //jal operation0 addr25
000010 00000 00000 00000 00000 000101 //j loop
000011 00000 00000 00000 00000 011101 //jal operation1 addr29
000010 00000 00000 00000 00000 000101 //j loop
000011 00000 00000 00000 00000 011111 //jal op2
000010 00000 00000 00000 00000 000101 //j loop
000011 00000 00000 00000 00000 100001 //jal op3
000010 00000 00000 00000 00000 000101 //j loop
000011 00000 00000 00000 00000 100011 //jal op4
000010 00000 00000 00000 00000 000101 //j loop
000011 00000 00000 00000 00000 100101 //jal op5
000010 00000 00000 00000 00000 000101 //j loop
000011 00000 00000 00000 00000 100111 //jal op6
000010 00000 00000 00000 00000 000101 //j loop


//operation 0 address 25
000000 00100 00101 00000 00000 011000 //mult $4,$5
000000 00000 00000 00010 00000 010010 //mflo $2
000000 00000 00000 00011 00000 010000 //mfhi $3
000000 11111 00000 00000 00000 001000 //jr $31

//operation1 addr 29
000000 00100 00101 00010 00000 101101 //add8 $2, $4, $5
000000 11111 00000 00000 00000 001000 //jr $31

//operation2  addr 31
001111 00000 00010 00010 00000 000000 //lui $2, 4096
000000 11111 00000 00000 00000 001000 //jr $31

//operation3 addr 33
000000 00010 00101 00000 00000 101111 //rbit $2, $5
000000 11111 00000 00000 00000 001000 //jr $31

//operation4: addr 35
000000 00010 00100 00000 00000 110000 //rev $2, $4
000000 11111 00000 00000 00000 001000 //jr $31

//operation5: addr 37
000000 00101 00101 00010 00000 110001 //sadd $2, $5, $5
000000 11111 00000 00000 00000 001000 //jr $31

//operation6: addr 39
000000 00100 00101 00010 00000 110010 //ssub $2, $4, $5
000000 11111 00000 00000 00000 001000 //jr $31